name: Branch Protection Enforcement

on:
  pull_request:
    branches: [ develop ]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      setup_protection:
        description: 'Setup branch protection rules'
        required: false
        default: 'false'
        type: boolean

jobs:
  # Enforce required checks before merge
  required-checks:
    name: Required Checks for Develop Branch
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check PR target branch
      run: |
        if [[ "${{ github.event.pull_request.base.ref }}" == "develop" ]]; then
          echo "✅ PR is targeting develop branch"
          echo "This PR must pass all required checks before merging"
        else
          echo "ℹ️  PR is not targeting develop branch, skipping develop-specific checks"
          exit 0
        fi

    - name: Validate PR requirements
      run: |
        # Check if PR has required labels (optional, can be customized)
        echo "Checking PR requirements..."
        
        # Ensure PR is not from a fork (security consideration)
        if [[ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]]; then
          echo "⚠️  PR is from a fork. Additional security review required."
        fi
        
        # Check if PR has been approved (this will be enforced by branch protection)
        echo "PR validation completed"

    - name: List required status checks
      run: |
        echo "The following checks must pass before merging to develop:"
        echo "1. ✅ Continuous Integration (ci.yml)"
        echo "2. ✅ Pull Request Checks (pr-checks.yml)"
        echo "3. ✅ Docker Build and Push (docker-build.yml)"
        echo "4. ✅ Docker Tests (test-docker.yml)"
        echo "5. ✅ Develop Branch Protection (develop-branch.yml)"
        echo "6. ✅ Branch Protection Enforcement (this workflow)"
        echo ""
        echo "All checks must be green before merge is allowed."

  # Setup branch protection (manual trigger only)
  setup-branch-protection:
    name: Setup Branch Protection Rules
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.setup_protection == 'true'
    steps:
    - name: Setup branch protection for develop
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          try {
            const protection = await github.rest.repos.updateBranchProtection({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: 'develop',
              required_status_checks: {
                strict: true,
                contexts: [
                  'Continuous Integration / All Checks Passed',
                  'Pull Request Checks / PR Checks Summary',
                  'Build and Push Docker Production Image / build-and-push',
                  'Docker Tests / test-docker',
                  'Develop Branch Protection / develop-validation-summary',
                  'Branch Protection Enforcement / required-checks'
                ]
              },
              enforce_admins: false,
              required_pull_request_reviews: {
                required_approving_review_count: 1,
                dismiss_stale_reviews: true,
                require_code_owner_reviews: false,
                require_last_push_approval: true
              },
              restrictions: null,
              allow_force_pushes: false,
              allow_deletions: false,
              block_creations: false,
              required_conversation_resolution: true
            });
            
            console.log('✅ Branch protection rules updated for develop branch');
            console.log('Required status checks:', protection.data.required_status_checks.contexts);
          } catch (error) {
            console.error('❌ Failed to update branch protection:', error.message);
            
            // If update fails, try to create new protection
            try {
              const newProtection = await github.rest.repos.updateBranchProtection({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: 'develop',
                required_status_checks: {
                  strict: true,
                  contexts: [
                    'Continuous Integration / All Checks Passed',
                    'Pull Request Checks / PR Checks Summary'
                  ]
                },
                enforce_admins: false,
                required_pull_request_reviews: {
                  required_approving_review_count: 1,
                  dismiss_stale_reviews: true
                },
                restrictions: null,
                allow_force_pushes: false,
                allow_deletions: false
              });
              console.log('✅ Basic branch protection created for develop branch');
            } catch (createError) {
              console.error('❌ Failed to create branch protection:', createError.message);
              throw createError;
            }
          }

  # Validate workflow files
  validate-workflows:
    name: Validate Workflow Files
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Validate workflow syntax
      run: |
        echo "Validating GitHub Actions workflow files..."
        
        # Check if all required workflow files exist
        required_workflows=(
          ".github/workflows/ci.yml"
          ".github/workflows/pr-checks.yml"
          ".github/workflows/docker-build.yml"
          ".github/workflows/test-docker.yml"
          ".github/workflows/develop-branch.yml"
          ".github/workflows/branch-protection.yml"
        )
        
        for workflow in "${required_workflows[@]}"; do
          if [[ -f "$workflow" ]]; then
            echo "✅ $workflow exists"
          else
            echo "❌ $workflow is missing"
            exit 1
          fi
        done
        
        echo "All required workflow files are present"

    - name: Check workflow triggers
      run: |
        echo "Checking workflow triggers for develop branch..."
        
        # Check if workflows are properly configured for develop branch
        workflows_with_develop=(
          ".github/workflows/ci.yml"
          ".github/workflows/pr-checks.yml"
          ".github/workflows/docker-build.yml"
          ".github/workflows/test-docker.yml"
          ".github/workflows/develop-branch.yml"
        )
        
        for workflow in "${workflows_with_develop[@]}"; do
          if grep -q "develop" "$workflow"; then
            echo "✅ $workflow includes develop branch triggers"
          else
            echo "⚠️  $workflow may not include develop branch triggers"
          fi
        done

  # Security check for workflow permissions
  security-check:
    name: Workflow Security Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check workflow permissions
      run: |
        echo "Checking workflow security configurations..."
        
        # Check for overly permissive permissions
        if grep -r "permissions:" .github/workflows/ | grep -E "(write-all|admin)"; then
          echo "⚠️  Found potentially overly permissive workflow permissions"
          grep -r "permissions:" .github/workflows/ | grep -E "(write-all|admin)"
          echo "Please review and ensure minimal necessary permissions"
        else
          echo "✅ No overly permissive permissions found"
        fi
        
        # Check for secrets usage
        if grep -r "secrets\." .github/workflows/; then
          echo "ℹ️  Workflows using secrets:"
          grep -r "secrets\." .github/workflows/ | cut -d: -f1 | sort | uniq
          echo "Ensure all secrets are properly configured in repository settings"
        fi

  # Final enforcement summary
  enforcement-summary:
    name: Branch Protection Summary
    runs-on: ubuntu-latest
    needs: [required-checks, validate-workflows, security-check]
    if: always()
    steps:
    - name: Generate protection summary
      run: |
        echo "## Branch Protection Enforcement Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "### PR to Develop Branch" >> $GITHUB_STEP_SUMMARY
          echo "- Target Branch: \`${{ github.event.pull_request.base.ref }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Source Branch: \`${{ github.event.pull_request.head.ref }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- PR Number: #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "### Required Checks Status" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ needs.required-checks.result }}" == "success" ]]; then
          echo "- ✅ Required Checks: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ Required Checks: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.validate-workflows.result }}" == "success" ]]; then
          echo "- ✅ Workflow Validation: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ Workflow Validation: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.security-check.result }}" == "success" ]]; then
          echo "- ✅ Security Check: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ Security Check: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Ensure all CI checks pass" >> $GITHUB_STEP_SUMMARY
        echo "2. Get required approvals" >> $GITHUB_STEP_SUMMARY
        echo "3. Resolve any merge conflicts" >> $GITHUB_STEP_SUMMARY
        echo "4. Merge when all checks are green" >> $GITHUB_STEP_SUMMARY

    - name: Check overall status
      run: |
        if [[ "${{ needs.required-checks.result }}" != "success" ]] || \
           [[ "${{ needs.validate-workflows.result }}" != "success" ]] || \
           [[ "${{ needs.security-check.result }}" != "success" ]]; then
          echo "❌ Branch protection enforcement failed"
          exit 1
        fi
        echo "✅ Branch protection enforcement passed"