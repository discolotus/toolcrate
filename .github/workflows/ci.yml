name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.6.1"

jobs:
  # Code quality checks
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Run code formatting check
      run: |
        poetry run black --check src/ tests/
        poetry run isort --check-only src/ tests/

    - name: Run linting
      run: |
        poetry run ruff check src/ tests/
        poetry run mypy src/

  # Unit and integration tests
  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration, python, shell]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Run ${{ matrix.test-type }} tests
      run: |
        case "${{ matrix.test-type }}" in
          unit)
            poetry run pytest tests/ -v -m "not integration"
            ;;
          integration)
            poetry run pytest tests/test_integration.py -v
            ;;
          python)
            poetry run pytest tests/ -v
            ;;
          shell)
            poetry run python tests/test_runner_unified.py shell
            ;;
        esac

  # Test coverage
  test-coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Run tests with coverage
      run: poetry run pytest tests/ --cov=src/toolcrate --cov-report=term-missing --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Docker build verification
  docker-build-check:
    name: Docker Build Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build production Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: toolcrate:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build test Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.test
        push: false
        tags: toolcrate:test-env
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test production image
      run: |
        docker run --rm toolcrate:test \
          bash -c "toolcrate --version && python -c 'import toolcrate; print(\"ToolCrate imported successfully\")'" 

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # All checks must pass
  all-checks:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [code-quality, test-suite, test-coverage, docker-build-check, security-scan]
    if: always()
    steps:
    - name: Check all jobs
      run: |
        if [[ "${{ needs.code-quality.result }}" != "success" ]]; then
          echo "Code quality checks failed"
          exit 1
        fi
        if [[ "${{ needs.test-suite.result }}" != "success" ]]; then
          echo "Test suite failed"
          exit 1
        fi
        if [[ "${{ needs.test-coverage.result }}" != "success" ]]; then
          echo "Test coverage failed"
          exit 1
        fi
        if [[ "${{ needs.docker-build-check.result }}" != "success" ]]; then
          echo "Docker build check failed"
          exit 1
        fi
        if [[ "${{ needs.security-scan.result }}" != "success" ]]; then
          echo "Security scan failed"
          exit 1
        fi
        echo "All checks passed successfully!"