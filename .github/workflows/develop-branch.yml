name: Develop Branch Protection

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.6.1"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/toolcrate

jobs:
  # Comprehensive testing for develop branch
  comprehensive-tests:
    name: Comprehensive Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
        test-category: [unit, integration, shell, docker]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Set up Docker for docker tests
      if: matrix.test-category == 'docker'
      uses: docker/setup-buildx-action@v3

    - name: Run ${{ matrix.test-category }} tests
      run: |
        case "${{ matrix.test-category }}" in
          unit)
            poetry run pytest tests/ -v -m "not integration" --junitxml=test-results-unit-${{ matrix.python-version }}.xml
            ;;
          integration)
            poetry run pytest tests/test_integration.py -v --junitxml=test-results-integration-${{ matrix.python-version }}.xml
            ;;
          shell)
            poetry run python tests/test_runner_unified.py shell
            ;;
          docker)
            # Build test image and run docker tests
            docker build -f Dockerfile.test -t toolcrate:test .
            docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace toolcrate:test /workspace/scripts/test-in-docker.sh quick
            ;;
        esac

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always() && (matrix.test-category == 'unit' || matrix.test-category == 'integration')
      with:
        name: test-results-${{ matrix.test-category }}-${{ matrix.python-version }}
        path: test-results-*.xml

  # Performance and load testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Run performance tests
      run: |
        # Test CLI response time
        echo "Testing CLI performance..."
        time poetry run toolcrate --version
        time poetry run toolcrate --help
        
        # Test import time
        echo "Testing import performance..."
        time poetry run python -c "import toolcrate"
        
        # Test config generation performance
        echo "Testing config generation performance..."
        time poetry run python -m toolcrate.config.manager --help || echo "Config manager test completed"

  # Documentation and examples validation
  docs-validation:
    name: Documentation Validation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Check README links
      run: |
        # Check for broken internal links in README
        if grep -n "](\./" README.md; then
          echo "Found relative links in README:"
          grep -n "](\./" README.md
          # Verify these files exist
          for link in $(grep -o "](\./[^)]*)" README.md | sed 's/](\.\///g' | sed 's/)//g'); do
            if [[ ! -f "$link" && ! -d "$link" ]]; then
              echo "Broken link found: $link"
              exit 1
            fi
          done
        fi
        echo "README links validation passed"

    - name: Validate example configurations
      run: |
        # Check if example configs are valid
        if [[ -f "examples/toolcrate.conf.example" ]]; then
          echo "Validating example configuration..."
          # Basic syntax check for YAML-like structure
          grep -E "^[a-zA-Z_][a-zA-Z0-9_]*:" examples/toolcrate.conf.example || echo "Example config format check completed"
        fi

    - name: Check documentation consistency
      run: |
        # Ensure all docs/*.md files are referenced somewhere
        for doc in docs/*.md; do
          if [[ -f "$doc" ]]; then
            basename_doc=$(basename "$doc")
            if ! grep -r "$basename_doc" README.md docs/ >/dev/null 2>&1; then
              echo "Warning: $doc may not be referenced anywhere"
            fi
          fi
        done

  # Security and compliance checks
  security-compliance:
    name: Security and Compliance
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run secret scanning
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified

    - name: Check for hardcoded credentials
      run: |
        # Look for potential hardcoded credentials
        suspicious_patterns=(
          "password\s*=\s*['\"][^'\"]{8,}"
          "api_key\s*=\s*['\"][^'\"]{16,}"
          "secret\s*=\s*['\"][^'\"]{16,}"
          "token\s*=\s*['\"][^'\"]{16,}"
        )
        
        for pattern in "${suspicious_patterns[@]}"; do
          if grep -r -E "$pattern" src/ --exclude-dir=__pycache__ || true; then
            echo "Potential hardcoded credential found with pattern: $pattern"
            echo "Please review and ensure no real credentials are committed"
          fi
        done

    - name: License compliance check
      run: |
        # Ensure LICENSE file exists and is not empty
        if [[ ! -f "LICENSE" ]] || [[ ! -s "LICENSE" ]]; then
          echo "LICENSE file is missing or empty"
          exit 1
        fi
        echo "License file validation passed"

  # Build and deployment readiness
  deployment-readiness:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build all Docker images
      run: |
        # Build production image
        docker build -f Dockerfile -t toolcrate:prod .
        
        # Build test image
        docker build -f Dockerfile.test -t toolcrate:test .
        
        # Test both images
        echo "Testing production image..."
        docker run --rm toolcrate:prod toolcrate --version
        
        echo "Testing test image..."
        docker run --rm toolcrate:test python -c "import pytest; print('Test environment ready')"

    - name: Check version consistency
      run: |
        # Extract version from pyproject.toml
        version=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        echo "Version in pyproject.toml: $version"
        
        # Check if version follows semantic versioning
        if [[ ! "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "Version does not follow semantic versioning: $version"
          exit 1
        fi
        
        echo "Version validation passed: $version"

  # Final validation summary
  develop-validation-summary:
    name: Develop Branch Validation Summary
    runs-on: ubuntu-latest
    needs: [comprehensive-tests, performance-tests, docs-validation, security-compliance, deployment-readiness]
    if: always()
    steps:
    - name: Check all validations
      run: |
        echo "Checking all develop branch validations..."
        
        if [[ "${{ needs.comprehensive-tests.result }}" != "success" ]]; then
          echo "❌ Comprehensive tests failed"
          exit 1
        fi
        
        if [[ "${{ needs.performance-tests.result }}" != "success" ]]; then
          echo "❌ Performance tests failed"
          exit 1
        fi
        
        if [[ "${{ needs.docs-validation.result }}" != "success" ]]; then
          echo "❌ Documentation validation failed"
          exit 1
        fi
        
        if [[ "${{ needs.security-compliance.result }}" != "success" ]]; then
          echo "❌ Security and compliance checks failed"
          exit 1
        fi
        
        if [[ "${{ needs.deployment-readiness.result }}" != "success" ]]; then
          echo "❌ Deployment readiness check failed"
          exit 1
        fi
        
        echo "✅ All develop branch validations passed!"
        echo "🚀 This branch is ready for production deployment"

    - name: Create deployment summary
      if: success() && github.event_name == 'push'
      run: |
        echo "## Develop Branch Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "✅ All checks passed successfully!" >> $GITHUB_STEP_SUMMARY
        echo "- Comprehensive tests: ✅" >> $GITHUB_STEP_SUMMARY
        echo "- Performance tests: ✅" >> $GITHUB_STEP_SUMMARY
        echo "- Documentation validation: ✅" >> $GITHUB_STEP_SUMMARY
        echo "- Security compliance: ✅" >> $GITHUB_STEP_SUMMARY
        echo "- Deployment readiness: ✅" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "This develop branch is ready for production deployment." >> $GITHUB_STEP_SUMMARY