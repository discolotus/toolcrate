name: Pull Request Checks

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.6.1"

jobs:
  # Skip if draft PR
  check-draft:
    name: Check if PR is draft
    runs-on: ubuntu-latest
    outputs:
      is_draft: ${{ steps.check.outputs.is_draft }}
    steps:
    - name: Check if PR is draft
      id: check
      run: |
        if [[ "${{ github.event.pull_request.draft }}" == "true" ]]; then
          echo "is_draft=true" >> $GITHUB_OUTPUT
          echo "This is a draft PR, skipping checks"
        else
          echo "is_draft=false" >> $GITHUB_OUTPUT
          echo "This is a ready PR, running checks"
        fi

  # PR title and description validation
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    needs: check-draft
    if: needs.check-draft.outputs.is_draft == 'false'
    steps:
    - name: Validate PR title
      run: |
        title="${{ github.event.pull_request.title }}"
        if [[ ${#title} -lt 10 ]]; then
          echo "PR title is too short (minimum 10 characters)"
          exit 1
        fi
        if [[ ${#title} -gt 100 ]]; then
          echo "PR title is too long (maximum 100 characters)"
          exit 1
        fi
        echo "PR title validation passed"

    - name: Validate PR description
      run: |
        body="${{ github.event.pull_request.body }}"
        if [[ ${#body} -lt 20 ]]; then
          echo "PR description is too short (minimum 20 characters)"
          exit 1
        fi
        echo "PR description validation passed"

  # Quick smoke tests for PRs
  quick-tests:
    name: Quick Tests
    runs-on: ubuntu-latest
    needs: check-draft
    if: needs.check-draft.outputs.is_draft == 'false'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Run quick tests
      run: poetry run pytest tests/test_package.py tests/test_main_cli.py -v

    - name: Basic import test
      run: |
        poetry run python -c "import toolcrate; print('ToolCrate imported successfully')"
        poetry run toolcrate --version

  # Check for breaking changes
  breaking-changes:
    name: Breaking Changes Check
    runs-on: ubuntu-latest
    needs: check-draft
    if: needs.check-draft.outputs.is_draft == 'false'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Check for breaking changes in API
      run: |
        # Check if any public API files have been modified
        changed_files=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD)
        
        breaking_files=(
          "src/toolcrate/__init__.py"
          "src/toolcrate/main.py"
          "src/toolcrate/cli/"
          "pyproject.toml"
        )
        
        for file in $changed_files; do
          for breaking_file in "${breaking_files[@]}"; do
            if [[ "$file" == *"$breaking_file"* ]]; then
              echo "⚠️  Potential breaking change detected in: $file"
              echo "Please ensure backward compatibility or update version appropriately"
            fi
          done
        done

  # File size and structure checks
  file-checks:
    name: File Structure Checks
    runs-on: ubuntu-latest
    needs: check-draft
    if: needs.check-draft.outputs.is_draft == 'false'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check for large files
      run: |
        large_files=$(find . -type f -size +10M -not -path "./.git/*" -not -path "./.*" || true)
        if [[ -n "$large_files" ]]; then
          echo "Large files detected (>10MB):"
          echo "$large_files"
          echo "Consider using Git LFS for large files"
          exit 1
        fi
        echo "No large files detected"

    - name: Check for sensitive files
      run: |
        sensitive_patterns=(
          "*.key"
          "*.pem"
          "*.p12"
          "*.pfx"
          "*password*"
          "*secret*"
          ".env"
          "*.env"
        )
        
        for pattern in "${sensitive_patterns[@]}"; do
          files=$(find . -name "$pattern" -not -path "./.git/*" -not -path "./examples/*" || true)
          if [[ -n "$files" ]]; then
            echo "Potentially sensitive files detected:"
            echo "$files"
            echo "Please review and ensure no secrets are committed"
            exit 1
          fi
        done
        echo "No sensitive files detected"

  # Dependency check
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    needs: check-draft
    if: needs.check-draft.outputs.is_draft == 'false'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Check for dependency conflicts
      run: |
        poetry check
        poetry lock --check

    - name: Check for security vulnerabilities
      run: |
        pip install safety
        poetry export -f requirements.txt --output requirements.txt --without-hashes
        safety check -r requirements.txt || echo "Security check completed with warnings"

  # All PR checks summary
  pr-checks-summary:
    name: PR Checks Summary
    runs-on: ubuntu-latest
    needs: [check-draft, pr-validation, quick-tests, breaking-changes, file-checks, dependency-check]
    if: always() && needs.check-draft.outputs.is_draft == 'false'
    steps:
    - name: Check all PR validations
      run: |
        if [[ "${{ needs.pr-validation.result }}" != "success" ]]; then
          echo "PR validation failed"
          exit 1
        fi
        if [[ "${{ needs.quick-tests.result }}" != "success" ]]; then
          echo "Quick tests failed"
          exit 1
        fi
        if [[ "${{ needs.breaking-changes.result }}" != "success" ]]; then
          echo "Breaking changes check failed"
          exit 1
        fi
        if [[ "${{ needs.file-checks.result }}" != "success" ]]; then
          echo "File checks failed"
          exit 1
        fi
        if [[ "${{ needs.dependency-check.result }}" != "success" ]]; then
          echo "Dependency check failed"
          exit 1
        fi
        echo "✅ All PR checks passed successfully!"

    - name: Comment on PR
      if: success()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '✅ All PR checks have passed! This PR is ready for review.'
          })