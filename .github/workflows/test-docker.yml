name: Docker Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/toolcrate-test

jobs:
  test-docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read

    strategy:
      matrix:
        test-type: [python, shell, unit, integration, quick]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Pull Docker test image
      run: |
        # Try to pull the branch-specific image, fallback to latest
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }} || \
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest || \
        echo "No pre-built image found, will build locally"

    - name: Run ${{ matrix.test-type }} tests
      run: |
        # Use the pulled image or build locally if not available
        if docker image inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }} >/dev/null 2>&1; then
          IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
        elif docker image inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest >/dev/null 2>&1; then
          IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        else
          echo "Building image locally..."
          docker build -f Dockerfile.test -t toolcrate:test .
          IMAGE_TAG="toolcrate:test"
        fi
        
        echo "Running ${{ matrix.test-type }} tests with image: $IMAGE_TAG"
        docker run --rm \
          --privileged \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          $IMAGE_TAG \
          /workspace/scripts/test-in-docker.sh ${{ matrix.test-type }}

  test-docker-all:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Run all tests with docker-compose
      run: |
        # Update docker-compose to use registry image if available
        if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }} >/dev/null 2>&1; then
          sed -i "s|image: toolcrate:test|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}|g" docker-compose.test.yml
          sed -i 's|build:|# build:|g' docker-compose.test.yml
          sed -i 's|context: \.|# context: \.|g' docker-compose.test.yml
          sed -i 's|dockerfile: Dockerfile\.test|# dockerfile: Dockerfile\.test|g' docker-compose.test.yml
        fi
        
        # Run the full test suite
        make test-docker

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          htmlcov/
          .coverage
        retention-days: 7
