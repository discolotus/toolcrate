#!/usr/bin/env python3
"""
ToolCrate Configuration Manager

This script helps manage the YAML configuration and generates compatible
configuration files for integrated tools.
"""

import argparse
import os
import sys
from pathlib import Path
from typing import Dict, Any

# Check if we're in a virtual environment
if not os.environ.get('VIRTUAL_ENV'):
    print("❌ Virtual environment not active!")
    print("Please activate the virtual environment first:")
    print("  source .venv/bin/activate")
    sys.exit(1)

try:
    import yaml
except ImportError:
    print("❌ PyYAML not installed in virtual environment.")
    print("Install with: pip install PyYAML")
    sys.exit(1)


class ConfigManager:
    """Manages ToolCrate configuration files."""
    
    def __init__(self, config_path: str = "config/toolcrate.yaml"):
        self.config_path = Path(config_path)
        self.config_dir = self.config_path.parent
        self.config = {}
        
    def load_config(self) -> Dict[str, Any]:
        """Load the YAML configuration."""
        try:
            with open(self.config_path, 'r') as f:
                self.config = yaml.safe_load(f)
            return self.config
        except FileNotFoundError:
            print(f"❌ Configuration file not found: {self.config_path}")
            sys.exit(1)
        except yaml.YAMLError as e:
            print(f"❌ YAML parsing error: {e}")
            sys.exit(1)
    
    def save_config(self):
        """Save the YAML configuration."""
        with open(self.config_path, 'w') as f:
            yaml.dump(self.config, f, default_flow_style=False, indent=2)
        print(f"✅ Configuration saved to {self.config_path}")
    
    def generate_sldl_conf(self):
        """Generate sldl.conf from YAML configuration."""
        if not self.config:
            self.load_config()
        
        slsk_config = self.config.get('slsk_batchdl', {})
        spotify_config = self.config.get('spotify', {})
        youtube_config = self.config.get('youtube', {})
        
        sldl_conf_path = self.config_dir / "sldl.conf"
        
        with open(sldl_conf_path, 'w') as f:
            f.write("# sldl.conf - Generated from toolcrate.yaml\n")
            f.write("# This file is automatically generated. Edit toolcrate.yaml instead.\n\n")
            
            # Authentication
            if slsk_config.get('username'):
                f.write(f"username = {slsk_config['username']}\n")
            if slsk_config.get('password'):
                f.write(f"password = {slsk_config['password']}\n")
            f.write("\n")
            
            # Directories
            dir_mappings = {
                'parent_dir': 'parent-dir',
                'skip_music_dir': 'skip-music-dir',
                'index_file_path': 'index-path',
                'm3u_file_path': 'm3u-path',
                'failed_album_path': 'failed-album-path',
                'log_file_path': 'log-path'
            }
            
            for yaml_key, conf_key in dir_mappings.items():
                if slsk_config.get(yaml_key):
                    f.write(f"{conf_key} = {slsk_config[yaml_key]}\n")
            f.write("\n")
            
            # Preferred conditions
            pref_cond = slsk_config.get('preferred_conditions', {})
            if pref_cond.get('formats'):
                formats = ','.join(pref_cond['formats'])
                f.write(f"pref-format = {formats}\n")
            
            pref_mappings = {
                'min_bitrate': 'pref-min-bitrate',
                'max_bitrate': 'pref-max-bitrate',
                'max_sample_rate': 'pref-max-sample-rate',
                'length_tolerance': 'pref-length-tol'
            }
            
            for yaml_key, conf_key in pref_mappings.items():
                if pref_cond.get(yaml_key) is not None:
                    f.write(f"{conf_key} = {pref_cond[yaml_key]}\n")
            
            if pref_cond.get('strict_title'):
                f.write("pref-strict-title = true\n")
            if pref_cond.get('strict_album'):
                f.write("pref-strict-album = true\n")
            f.write("\n")
            
            # Search and download settings
            search_mappings = {
                'concurrent_processes': 'concurrent-processes',
                'search_timeout': 'search-timeout',
                'listen_port': 'listen-port',
                'fast_search_delay': 'fast-search-delay',
                'fast_search_min_up_speed': 'fast-search-min-up-speed',
                'max_stale_time': 'max-stale-time',
                'unknown_error_retries': 'unknown-error-retries',
                'max_retries_per_track': 'max-retries-per-track',
                'searches_per_time': 'searches-per-time',
                'search_renew_time': 'search-renew-time',
                'min_shares_aggregate': 'min-shares-aggregate',
                'aggregate_length_tol': 'aggregate-length-tol'
            }
            
            for yaml_key, conf_key in search_mappings.items():
                if slsk_config.get(yaml_key) is not None:
                    f.write(f"{conf_key} = {slsk_config[yaml_key]}\n")
            
            # Boolean flags
            bool_mappings = {
                'fast_search': 'fast-search',
                'skip_existing': 'skip-existing',
                'write_index': 'write-index',
                'interactive_mode': 'interactive',
                'album': 'album',
                'aggregate': 'aggregate',
                'album_art_only': 'album-art-only',
                'desperate_search': 'desperate-search',
                'no_remove_special_chars': 'no-remove-special-chars',
                'artist_maybe_wrong': 'artist-maybe-wrong',
                'yt_parse': 'yt-parse',
                'remove_ft': 'remove-ft',
                'remove_brackets': 'remove-brackets',
                'reverse': 'reverse',
                'use_ytdlp': 'use-ytdlp',
                'remove_tracks_from_source': 'remove-tracks-from-source',
                'get_deleted': 'get-deleted',
                'deleted_only': 'deleted-only',
                'remove_single_character_search_terms': 'remove-single-character-search-terms',
                'relax': 'relax',
                'no_modify_share_count': 'no-modify-share-count',
                'use_random_login': 'use-random-login',
                'no_browse_folder': 'no-browse-folder',
                'skip_check_cond': 'skip-check-cond',
                'skip_check_pref_cond': 'skip-check-pref-cond',
                'no_progress': 'no-progress',
                'write_playlist': 'write-playlist',
                'parallel_album_search': 'parallel-album-search',
                'extract_artist': 'extract-artist'
            }
            
            for yaml_key, conf_key in bool_mappings.items():
                if slsk_config.get(yaml_key) is True:
                    f.write(f"{conf_key} = true\n")
            f.write("\n")
            
            # String settings
            string_mappings = {
                'time_unit': 'time-format',
                'invalid_replace_str': 'invalid-replace-str',
                'ytdlp_argument': 'ytdlp-argument',
                'parse_title_template': 'parse-title-template'
            }
            
            for yaml_key, conf_key in string_mappings.items():
                if slsk_config.get(yaml_key):
                    f.write(f"{conf_key} = {slsk_config[yaml_key]}\n")
            
            # API credentials
            if spotify_config.get('client_id'):
                f.write(f"spotify-id = {spotify_config['client_id']}\n")
            if spotify_config.get('client_secret'):
                f.write(f"spotify-secret = {spotify_config['client_secret']}\n")
            if youtube_config.get('api_key'):
                f.write(f"yt-key = {youtube_config['api_key']}\n")
            f.write("\n")
            
            # Profiles
            profiles = self.config.get('profiles', {})
            for profile_name, profile_config in profiles.items():
                f.write(f"[{profile_name}]\n")
                profile_settings = profile_config.get('settings', {})
                
                # Handle profile-specific settings
                if 'preferred_conditions' in profile_settings:
                    pref = profile_settings['preferred_conditions']
                    if pref.get('formats'):
                        formats = ','.join(pref['formats'])
                        f.write(f"pref-format = {formats}\n")
                    for yaml_key, conf_key in pref_mappings.items():
                        if pref.get(yaml_key) is not None:
                            f.write(f"{conf_key} = {pref[yaml_key]}\n")
                
                # Handle other profile settings
                for yaml_key, conf_key in bool_mappings.items():
                    if profile_settings.get(yaml_key) is True:
                        f.write(f"{conf_key} = true\n")
                
                f.write("\n")
        
        print(f"✅ Generated sldl.conf at {sldl_conf_path}")
    
    def validate_config(self):
        """Validate the configuration."""
        if not self.config:
            self.load_config()
        
        errors = []
        warnings = []
        
        # Check required sections
        required_sections = ['general', 'slsk_batchdl', 'spotify', 'youtube', 'cron', 'mounts']
        for section in required_sections:
            if section not in self.config:
                errors.append(f"Missing required section: {section}")
        
        # Validate slsk_batchdl settings
        if 'slsk_batchdl' in self.config:
            slsk = self.config['slsk_batchdl']
            
            if not slsk.get('username'):
                warnings.append("Soulseek username not configured")
            if not slsk.get('password'):
                warnings.append("Soulseek password not configured")
            
            # Check numeric values
            numeric_fields = ['concurrent_processes', 'search_timeout', 'listen_port']
            for field in numeric_fields:
                if field in slsk and not isinstance(slsk[field], int):
                    errors.append(f"Field {field} must be an integer")
        
        # Validate directory paths
        if 'general' in self.config:
            for dir_field in ['data_directory', 'log_directory']:
                if dir_field in self.config['general']:
                    path = Path(self.config['general'][dir_field])
                    if not path.exists():
                        warnings.append(f"Directory does not exist: {path}")
        
        # Print results
        if errors:
            print("❌ Configuration errors found:")
            for error in errors:
                print(f"  - {error}")
        
        if warnings:
            print("⚠️  Configuration warnings:")
            for warning in warnings:
                print(f"  - {warning}")
        
        if not errors and not warnings:
            print("✅ Configuration is valid!")
        
        return len(errors) == 0


def main():
    """Main entry point."""
    parser = argparse.ArgumentParser(description="ToolCrate Configuration Manager")
    parser.add_argument("--config", "-c", default="config/toolcrate.yaml",
                       help="Path to the YAML configuration file")
    
    subparsers = parser.add_subparsers(dest="command", help="Available commands")
    
    # Validate command
    subparsers.add_parser("validate", help="Validate the configuration")
    
    # Generate command
    subparsers.add_parser("generate-sldl", help="Generate sldl.conf from YAML")
    
    # Show command
    subparsers.add_parser("show", help="Show current configuration")
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    config_manager = ConfigManager(args.config)
    
    if args.command == "validate":
        is_valid = config_manager.validate_config()
        sys.exit(0 if is_valid else 1)
    
    elif args.command == "generate-sldl":
        config_manager.generate_sldl_conf()
    
    elif args.command == "show":
        config = config_manager.load_config()
        print(yaml.dump(config, default_flow_style=False, indent=2))


if __name__ == "__main__":
    main()
