[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "toolcrate"
version = "0.1.0"
description = "A unified tool suite for music management and processing"
authors = ["User <user@example.com>"]
readme = "README.md"
license = "GPL-3.0"
homepage = "https://github.com/yourusername/toolcrate"
repository = "https://github.com/yourusername/toolcrate"
keywords = ["music", "soulseek", "shazam", "download", "batch"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio",
]
packages = [{include = "toolcrate", from = "src"}]
include = [
    "README.md",
    "LICENSE",
    "examples/*.example",
]

[tool.poetry.dependencies]
python = ">=3.8,<4.0"
click = "^8.1.3"
pydantic = "^2.0.0"
loguru = "^0.7.0"
requests = "^2.25.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.3.1"
pytest-cov = "^4.1.0"
black = "^23.3.0"
isort = "^5.12.0"
mypy = "^1.3.0"
pre-commit = "^3.3.0"

[tool.poetry.scripts]
toolcrate = "toolcrate.cli.main:main"
slsk-tool = "toolcrate.cli.wrappers:run_slsk"
shazam-tool = "toolcrate.cli.wrappers:run_shazam"
mdl-tool = "toolcrate.cli.wrappers:run_mdl"
toolcrate-identify-wishlist = "toolcrate.scripts.process_wishlist:main"
toolcrate-identify-djsets = "toolcrate.scripts.process_wishlist:main"

[tool.black]
line-length = 88
target-version = ['py38']

[tool.isort]
profile = "black"
line_length = 88

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
] 